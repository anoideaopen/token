// Code generated by MockGen. DO NOT EDIT.
// Source: controller/balance.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	big "math/big"
	reflect "reflect"

	model "github.com/anoideaopen/token/model"
	gomock "go.uber.org/mock/gomock"
)

// MockBalance is a mock of Balance interface.
type MockBalance struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceMockRecorder
}

// MockBalanceMockRecorder is the mock recorder for MockBalance.
type MockBalanceMockRecorder struct {
	mock *MockBalance
}

// NewMockBalance creates a new mock instance.
func NewMockBalance(ctrl *gomock.Controller) *MockBalance {
	mock := &MockBalance{ctrl: ctrl}
	mock.recorder = &MockBalanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalance) EXPECT() *MockBalanceMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockBalance) Deposit(ctx context.Context, addr model.Address, acc model.Account, curr model.Currency, amt *big.Int) (model.BalanceUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, addr, acc, curr, amt)
	ret0, _ := ret[0].(model.BalanceUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockBalanceMockRecorder) Deposit(ctx, addr, acc, curr, amt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockBalance)(nil).Deposit), ctx, addr, acc, curr, amt)
}

// Fetch mocks base method.
func (m *MockBalance) Fetch(ctx context.Context, addr model.Address, acc model.Account, curr model.Currency) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, addr, acc, curr)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockBalanceMockRecorder) Fetch(ctx, addr, acc, curr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockBalance)(nil).Fetch), ctx, addr, acc, curr)
}

// InternalTransfer mocks base method.
func (m *MockBalance) InternalTransfer(ctx context.Context, addr model.Address, accFrom, accTo model.Account, curr model.Currency, val *big.Int) ([2]model.BalanceUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalTransfer", ctx, addr, accFrom, accTo, curr, val)
	ret0, _ := ret[0].([2]model.BalanceUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalTransfer indicates an expected call of InternalTransfer.
func (mr *MockBalanceMockRecorder) InternalTransfer(ctx, addr, accFrom, accTo, curr, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalTransfer", reflect.TypeOf((*MockBalance)(nil).InternalTransfer), ctx, addr, accFrom, accTo, curr, val)
}

// Transfer mocks base method.
func (m *MockBalance) Transfer(ctx context.Context, addrFrom, addrTo model.Address, acc model.Account, curr model.Currency, val *big.Int) ([2]model.BalanceUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, addrFrom, addrTo, acc, curr, val)
	ret0, _ := ret[0].([2]model.BalanceUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockBalanceMockRecorder) Transfer(ctx, addrFrom, addrTo, acc, curr, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockBalance)(nil).Transfer), ctx, addrFrom, addrTo, acc, curr, val)
}

// Withdraw mocks base method.
func (m *MockBalance) Withdraw(ctx context.Context, addr model.Address, acc model.Account, curr model.Currency, amt *big.Int) (model.BalanceUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, addr, acc, curr, amt)
	ret0, _ := ret[0].(model.BalanceUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockBalanceMockRecorder) Withdraw(ctx, addr, acc, curr, amt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockBalance)(nil).Withdraw), ctx, addr, acc, curr, amt)
}
