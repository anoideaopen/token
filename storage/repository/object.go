// Code generated by ifacemaker; DO NOT EDIT.

package repository

import (
	"context"

	"github.com/anoideaopen/token/model"
)

// Repository describes methods, implemented by the storage package.
type Object interface {
	// Load attempts to load an Object from the database.
	// The object is identified by the provided query.
	Load(ctx context.Context, q model.ObjectQuery, obj model.Object) error
	// Save attempts to save an Object object to the database.
	// The object is identified by the provided query.
	Save(ctx context.Context, q model.ObjectQuery, obj model.Object) error
	// Delete attempts to delete an Object object from the database.
	// The object is identified by the provided query.
	Delete(ctx context.Context, q model.ObjectQuery) error
	// Iter iterates over a set of objects from the database that match a
	// given query. For each object that matches, it clones the template object, unmarshals
	// the object data into the clone, validates the clone, and then passes the clone to
	// the provided iterator function. Iteration stops if the iterator function returns false.
	Iter(ctx context.Context, q model.ObjectQuery, tmpl model.Object, cb func(obj model.Object) (stop bool)) error
}
