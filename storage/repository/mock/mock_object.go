// Code generated by MockGen. DO NOT EDIT.
// Source: repository/object.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/anoideaopen/token/model"
	gomock "go.uber.org/mock/gomock"
)

// MockObject is a mock of Object interface.
type MockObject struct {
	ctrl     *gomock.Controller
	recorder *MockObjectMockRecorder
}

// MockObjectMockRecorder is the mock recorder for MockObject.
type MockObjectMockRecorder struct {
	mock *MockObject
}

// NewMockObject creates a new mock instance.
func NewMockObject(ctrl *gomock.Controller) *MockObject {
	mock := &MockObject{ctrl: ctrl}
	mock.recorder = &MockObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObject) EXPECT() *MockObjectMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockObject) Delete(ctx context.Context, q model.ObjectQuery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, q)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockObjectMockRecorder) Delete(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockObject)(nil).Delete), ctx, q)
}

// Iter mocks base method.
func (m *MockObject) Iter(ctx context.Context, q model.ObjectQuery, tmpl model.Object, cb func(model.Object) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iter", ctx, q, tmpl, cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// Iter indicates an expected call of Iter.
func (mr *MockObjectMockRecorder) Iter(ctx, q, tmpl, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iter", reflect.TypeOf((*MockObject)(nil).Iter), ctx, q, tmpl, cb)
}

// Load mocks base method.
func (m *MockObject) Load(ctx context.Context, q model.ObjectQuery, obj model.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, q, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockObjectMockRecorder) Load(ctx, q, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockObject)(nil).Load), ctx, q, obj)
}

// Save mocks base method.
func (m *MockObject) Save(ctx context.Context, q model.ObjectQuery, obj model.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, q, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockObjectMockRecorder) Save(ctx, q, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockObject)(nil).Save), ctx, q, obj)
}
